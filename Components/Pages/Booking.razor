@rendermode InteractiveServer
@page "/rezerwacja"

@using System.ComponentModel
@using System.Text.RegularExpressions
@using barber_website.Models
@using barber_website.Services

<PageTitle>M studio - rezerwacja wizyty</PageTitle>

<header class="relative w-screen h-[4.5rem] z-70 text-white font-montserrat font-normal text-sm flex flex-row items-center justify-between bg-gradient-to-r from-black to-[#212121]" id="navbar">
	<div @onclick="ReturnToHome" class="flex flex-row items-center ml-8 hover:cursor-pointer">
		<svg class="fill-white mr-4 rotate-180 hover:cursor-pointer" height="14" width="14" viewBox="0 0 15 15" xmlns="http://www.w3.org/2000/svg" role="img" alt=""><path d="M14.8,7.5L9,13.4L7.6,12L11,8.6H0.2v-2H11L7.7,3L9,1.6L14.8,7.5z"></path></svg>
		Strona główna
	</div>


	<img src="./img/ms-w.png" class="w-14 mr-12" />
</header>
<main class="bg-white">
	@if (bookingPage > 0)
	{
		<div class="absolute left-0 top-0 w-screen h-screen flex flex-col items-center justify-center z-50 backdrop-blur-md bg-black/50">
			<div class="h-3/4 w-2/5 bg-white shadow-xl rounded">

				@if (bookingPage == 1)
				{
					<div class="flex flex-col w-full items-center">
						<div class="text-xl text-black font-montserrat font-bold text-center m-4">Wybór terminu</div>


						<div class="flex flex-row w-4/5 flex-wrap justify-center mb-4 transition-all">
							@foreach (var day in availableSlots.GroupBy(slot => slot.Date))
							{
								<button @onclick="() => ShowAvailableSlots(day.Key)" class="font-montserrat flex flex-col items-center border-2 border-neutral-200 py-2 px-5 m-1 rounded-md">
									<div class="flex flex-row items-center mt-0.5">
										<div class="bg-neutral-200 rounded w-2 h-2 m-0.5"></div>
										<div class="bg-neutral-200 rounded w-2 h-2 m-0.5"></div>
										<div class="bg-neutral-200 rounded w-2 h-2 m-0.5"></div>
									</div>
									<div class="font-bold text-center text-lg mt-2">@day.Key.ToString("dd")</div>
									<div class="font-normal text-center text-sm mt-1 mb-0.5">
										@CapitalizeMonthName(day.Key.ToString("MMM", new System.Globalization.CultureInfo("pl-PL")))
									</div>
								</button>
							}
						</div>
						<div class="flex flex-row w-3/4 flex-wrap justify-center mb-4">
							@if (selectedDate != null)
							{
								@foreach (var slot in availableSlots.Where(slot => slot.Date == selectedDate))
								{
									<button @onclick='() => slotSelected(slot)' class="font-montserrat rounded-md border-2 border-neutral-200 text-black text-sm m-1 py-2 w-16">@slot.ToString("HH:mm")</button>
								}
							}
						</div>
					</div>


					<div @onclick='MakeReservation' class="font-montserrat text-black text-center text-xl font-light uppercase mb-8 hover:cursor-pointer">ZAREZERWUJ</div>
				}
				@if (bookingPage == 2 && umail != null)
				{
					<div class="flex flex-col w-full items-center">
						<div class="text-sm text-black text-center">Wysłaliśmy wiadomość e-mail z kodem potwierdzającym na podany przez Ciebie adres: @umail</div>

						<div class="code-inputs flex flex-row">
							@foreach (var index in Enumerable.Range(0, 6))
							{
								<input type="text" maxlength="1" class="w-16 h-24 bg-neutral-100 text-black font-montserrat font-bold text-center outline-none m-2 rounded-md text-lg"
								@ref="verificationCodeInputs[index]"
								@bind-value="verificationCode[index]"
								@oninput="e => OnInput(e, index)" 
								@onkeydown="e => OnKeyDown(e, index)" />
							}
						</div>

						<button @onclick="VerifyEmailAndBook">Potwierdź</button>
					</div>


					// Kod z mail
				}
				@if (bookingPage == 3)
				{
					<div>Dziękujemy za dokonanie rezerwacji!</div>	
				}
			</div>
		</div>
	}
	<div class="w-screen h-screen flex flex-row items-center justify-between m-8 z-20">
		<div class="w-3/5 h-screen flex flex-col items-center relative">
			@if (!MailPhoneAdded)
			{
				<div class="absolute left-0 top-0 w-full h-full flex flex-col justify-center items-center z-40 backdrop-blur-md">

					<div class="text-black text-xl font-montserrat mb-4 uppercase tracking-wider">Wymagane informacje</div>

					<input @bind="umail" type="text" placeholder="adres@mail.com" class="bg-neutral-100 rounded-3xl font-montserrat text-black px-4 py-2 outline-none w-1/3 mb-4" />
					<input @bind="uphone" type="text" placeholder="+48 XXX XXX XXX" class="bg-neutral-100 rounded-3xl font-montserrat text-black px-4 py-2 outline-none w-1/3 mb-4" />
					<button @onclick='ValidateCredentialsAndSubmit' class="font-montserrat text-white bg-neutral-950 px-4 py-2 rounded-3xl text-center w-1/3 transition-all hover:bg-neutral-900">Zatwierdź</button>

				</div>
			}
			<div class="bg-neutral-50 w-full h-3/4">
				<div class="w-full h-full">
					<div class="flex flex-row flex-wrap w-full font-montserrat">
						@if (offers != null)
						{
							@foreach (Offer offer in offers)
							{
								<div class="bg-white shadow rounded flex flex-row m-4 w-[28rem] h-auto justify-between">
									<div class="flex flex-col m-2 justify-center">
										<div class="font-semibold">@offer.Label</div>
										<div class="text-sm text-stone-400">@offer.Description</div>
									</div>
									<div class="flex flex-row m-2 items-center">
										<div class="mr-2 text-nowrap">@offer.Price zł</div>
										<button @onclick='() => AddOffer(offer.Label, offer.Duration, offer.Price)' class="p-4 border w-12 h-12 rounded"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M256 80c0-17.7-14.3-32-32-32s-32 14.3-32 32V224H48c-17.7 0-32 14.3-32 32s14.3 32 32 32H192V432c0 17.7 14.3 32 32 32s32-14.3 32-32V288H400c17.7 0 32-14.3 32-32s-14.3-32-32-32H256V80z" /></svg></button>
									</div>
								</div>
							}
						}
					</div>
				</div>
			</div>
			<div class="bg-neutral-50 mt-4 w-full h-36">
				<div class="w-full h-full ml-4 flex flex-row items-center justify-between">
					<div class="font-montserrat flex flex-row w-1/2 flex-wrap items-center leading-6">
						@if (SelectedOffers != null)
						{
							@foreach (var sofer in SelectedOffers)
							{
								@if (sofer.Value > 0)
								{
									<div class="mr-2">@sofer.Value x @sofer.Key </div>
								}
							}
						}
					</div>
					<div class="font-montserrat flex flex-row items-center">
						<div class="mr-4">@totalPrice zł</div>
						<button @onclick="StartReservation" class="font-montserrat p-4 border rounded bg-white mr-8">Zarezerwuj</button>
					</div>
				</div>
			</div>
		</div>
		<div class="w-1/5 h-screen flex flex-col items-center mr-16">
			<div class="w-full h-3/4">
				<div class="font-montserrat text-3xl text-black font-normal border-b py-1 mb-4 w-1/3">Koszyk</div>
				<div class="w-full h-auto bg-neutral-50 mb-4">
					<div class="font-montserrat text-black py-2 px-4 text-lg">+48 513 613 643</div>
				</div>
				<div class="w-full h-auto bg-neutral-50 mb-4">
					<div class="font-montserrat text-black py-2 px-4 text-lg">ul. Majowa 45, Niemce 21-040</div>
				</div>
				<div class="w-full h-auto bg-neutral-50 mb-4">
					@if (openHours != null)
					{
						<table class="w-full font-montserrat mt-4">
							@foreach (var oh in openHours)
							{
								<tr class="py-2">
									@if (oh.isOpen)
									{
										<td class="flex justify-between">
											<div class="ml-4">@TranslateDayOfWeek(oh.dayOfWeek)</div>
											<div class="mr-4">@($"{oh.openHour:hh\\:mm} - {oh.closeHour:hh\\:mm}")</div>
										</td>
									}
									else
									{
										<td class="flex justify-between">
											<div class="ml-4">@TranslateDayOfWeek(oh.dayOfWeek)</div>
											<div class="mr-4">@("Zamknięte")</div>
										</td>
									}
								</tr>
							}
						</table>
					}
				</div>
			</div>
		</div>
	</div>
</main>


@code {
	@inject NavigationManager NavigationManager
	@inject IInitService init
	@inject IAvailabilityService availability
	@inject IBookingService book
	@inject IJSRuntime JsRuntime

	List<Offer> offers = new List<Offer>();
	List<OpeningHours> openHours = new List<OpeningHours>();
	List<DateTime> availableSlots = new List<DateTime>();

	private List<ElementReference> verificationCodeInputs = new ElementReference[6].ToList();
	private string[] verificationCode = new string[6];

	DateTime? selectedDate; DateTime selectedSlot;
	private string umail { get; set; }
	private string uphone { get; set; }

	private bool MailPhoneAdded = false;
	private int bookingPage = 0;

	private int resSite = 1;

	private int totalDuration { get; set; }
	private decimal totalPrice { get; set; }

	Dictionary<string, int> SelectedOffers = new Dictionary<string, int>();

	protected override async Task OnInitializedAsync()
	{
		offers = await init.GetOffers();
		openHours = await init.GetCalendar();

		foreach (var offer in offers)
		{
			SelectedOffers.Add(offer.Label, 0);
		}

		//await JsRuntime.InvokeVoidAsync("initSwiper", null);
	}

	void ShowAvailableSlots(DateTime date)
	{
		selectedDate = date;
	}

	private async Task slotSelected(DateTime slot)
	{
		selectedSlot = slot;
	}

	private async Task OnInput(ChangeEventArgs args, int index)
	{
		var value = args.Value.ToString();
		if (!string.IsNullOrEmpty(value))
		{
			value = value.ToUpper();
			await JsRuntime.InvokeVoidAsync("emailVerification.setInputValue", verificationCodeInputs[index], value);

			if (index < verificationCodeInputs.Count - 1)
				await JsRuntime.InvokeVoidAsync("emailVerification.focusInput", index + 1);
		}
	}

	private async Task OnKeyDown(KeyboardEventArgs args, int index)
	{
		if (args.Key == "Backspace" && index > 0)
		{
			await JsRuntime.InvokeVoidAsync("emailVerification.focusInput", index - 1);
		}
	}

	private async Task AddOffer(string service, int duration, decimal price)
	{
		if (SelectedOffers.ContainsKey(service) && totalDuration <= 120)
		{
			SelectedOffers[service]++;

			totalDuration += duration;
			totalPrice += price;
		}
	}

	private async Task StartReservation()
	{
		availableSlots = await availability.GetAvailableSlots();
		bookingPage = 1;
	}

	private async Task MakeReservation()
	{

		if (await book.IsReservationAvailable(selectedSlot, totalDuration, umail))
		{
			await book.StartVerification(umail);
			bookingPage = 2;
		}
		else
		{
			// This slot is taken or email is taken
		}
	}

	private async Task VerifyEmailAndBook()
	{
		string combinedCode = string.Join("", verificationCode);
		Console.WriteLine(combinedCode);

		if (await book.VerifyCode(combinedCode, umail))
		{
			Reservation newRes = new Reservation();
			newRes.ReservationId = book.GenerateCode(5);
			newRes.Email = umail;
			newRes.Phone = uphone;
			newRes.Duration = totalDuration;
			newRes.ReservationDateTime = selectedSlot.ToUniversalTime();
			newRes.Services = Newtonsoft.Json.JsonConvert.SerializeObject(SelectedOffers);

			await book.BookHour(newRes);
			bookingPage = 3;
		}
	}

	private async Task ValidateCredentialsAndSubmit()
	{
		if(IsValidEmail(umail) && IsValidPhoneNumber(uphone))
		{
			MailPhoneAdded = true;
		}
		else
		{
			
		}
	}

	private bool IsValidEmail(string email)
	{
		string[] allowedDomains = { "@gmail.com", "@outlook.com", "@yahoo.com", "@wp.pl", "@onet.pl", "interia.pl", "o2.pl", "poczta.onet.pl", "op.pl", "tlen.pl", "gazeta.pl" };

		string pattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
		string domainPattern = $"^.*({string.Join("|", allowedDomains)})$";

		return !string.IsNullOrWhiteSpace(email) && Regex.IsMatch(email, pattern) && Regex.IsMatch(email, domainPattern, RegexOptions.IgnoreCase);
	}

	private bool IsValidPhoneNumber(string phone)
	{
		string pattern = @"^(?:\+?48)? ?(?: ?\d){9}$";

		return !string.IsNullOrWhiteSpace(phone) && phone.All(char.IsDigit) && phone.Length <= 12 && Regex.IsMatch(phone, pattern);
	}

	private void ReturnToHome()
	{
		NavigationManager.NavigateTo("/", forceLoad: true);
	}

	string TranslateDayOfWeek(string dayOfWeek)
	{
		switch (dayOfWeek)
		{
			case "Monday":
				return "Poniedziałek";
			case "Tuesday":
				return "Wtorek";
			case "Wednesday":
				return "Środa";
			case "Thursday":
				return "Czwartek";
			case "Friday":
				return "Piątek";
			case "Saturday":
				return "Sobota";
			case "Sunday":
				return "Niedziela";
			default:
				return dayOfWeek;
		}
	}

	string CapitalizeMonthName(string month)
	{
		return char.ToUpper(month[0]) + month.Substring(1);
	}
}
